package com.parkinglot.service;

import java.util.ArrayList;
import java.util.List;

import com.parkinglot.entities.Ticket;
import com.parkinglot.entities.Vehicle;

/**
 * This class stores the tickets generated by TicketService. It is a singleton
 * class. There will be only one parking lot instance. Once it is created. It
 * will be reused.
 * 
 * @author vishwas
 *
 */
public class ParkingLot {

	public static ParkingLot parkingLot;

	private int capacity;

	private Ticket[] ticketArray;

	private TicketService ticketService;

	private static final char NEW_LINE = '\n';
	private static final char TAB = '\t';
	private static final String SLOT_NUM = "No";
	private static final String REGISTERED_SLOT_NUM = "Registration Slot No.";
	private static final String COLOUR = "Colour";

	private ParkingLot(int capacity) {
		super();
		this.capacity = capacity;
		this.ticketArray = new Ticket[capacity + 1];
		this.ticketService = new TicketService();
	}

	/**
	 * 
	 * @param n
	 *            capacity of parking lot.
	 * @return A parking lot instance with capacity n. If parking lot is already
	 *         initialized, it returns the old instance.
	 */
	public static ParkingLot getInstance(Integer n) {
		if (parkingLot == null) {
			synchronized (ParkingLot.class) {
				if (parkingLot == null) {
					parkingLot = new ParkingLot(n);
				}
			}
		}
		return parkingLot;
	}

	/**
	 * 
	 * @param vehicle
	 *            Vehicle to park.
	 * @return Ticket containing the slot number and vehicle object. Returns
	 *         null if parking lot is full.
	 */
	public Ticket park(Vehicle vehicle) {
		Ticket ticket = ticketService.getTicketByRegNumber(vehicle.getRegistrationNumber());
		if (ticket != null) {
			return ticket;
		}
		int i = getNextEmptySlot();
		if (i == -1) {
			return null;
		}
		ticketArray[i] = ticketService.generateNewTicket(i, vehicle);
		return ticketArray[i];
	}

	/**
	 * 
	 * @param slotNo
	 *            deletes the ticket for the slot number.
	 */
	public void leave(int slotNo) {
		if (slotNo < 0 || slotNo > capacity || ticketArray[slotNo] == null) {
			return;
		}
		ticketService.destroyTicket(ticketArray[slotNo]);
		ticketArray[slotNo] = null;
		return;
	}

	/**
	 * 
	 * @param regNumber
	 *            Registration Number of vehicle parked.
	 * @return Slot number where vehicle is parked. Returns null if vehicle is
	 *         not parked.
	 */
	public Integer getSlotNumberByRegNumber(String regNumber) {
		Ticket ticket = ticketService.getTicketByRegNumber(regNumber);
		if (ticket == null) {
			return null;
		}
		return ticket.getSlotNo();
	}

	/**
	 * 
	 * @param color
	 *            Color of vehicle parked.
	 * @return List of slot numbers of vehicle parked with that color. Returns
	 *         null if there is no vehicle parked of that color.
	 */
	public List<Integer> getSlotNumbersByColor(String color) {
		List<Ticket> ticketList = ticketService.getTicketsByColor(color);
		if (ticketList == null || ticketList.isEmpty()) {
			return null;
		}
		List<Integer> slotNumbers = new ArrayList<>();
		for (Ticket ticket : ticketList) {
			slotNumbers.add(ticket.getSlotNo());
		}
		return slotNumbers;
	}

	/**
	 * 
	 * @param color
	 *            Color of vehicle parked.
	 * @return List of registration numbers of vehicle parked with that color.
	 *         Returns null if there is no vehicle parked of that color.
	 */
	public List<String> getRegNumbersByColor(String color) {
		List<Ticket> ticketList = ticketService.getTicketsByColor(color);
		if (ticketList == null || ticketList.isEmpty()) {
			return null;
		}
		List<String> colorNumbers = new ArrayList<>();
		for (Ticket ticket : ticketList) {
			colorNumbers.add(ticket.getVehicle().getRegistrationNumber());
		}
		return colorNumbers;
	}

	/**
	 * 
	 * @return Tab delimited String having SlotNumber, RegistrationNumber and
	 *         Color of all the vehicles parked.
	 * 
	 */
	public String getStatus() {
		StringBuffer sb = new StringBuffer();
		sb.append(NEW_LINE);
		sb.append(NEW_LINE);
		sb.append(SLOT_NUM);
		sb.append(TAB);
		sb.append(REGISTERED_SLOT_NUM);
		sb.append(TAB);
		sb.append(COLOUR);
		sb.append(NEW_LINE);
		for (int i = 1; i < capacity; i++) {
			if (ticketArray[i] != null) {
				sb.append(ticketArray[i].getSlotNo());
				sb.append(TAB);
				sb.append(ticketArray[i].getVehicle().getRegistrationNumber());
				sb.append(TAB);
				sb.append(ticketArray[i].getVehicle().getColor());
				sb.append(NEW_LINE);
			}
		}
		return sb.toString();
	}

	/**
	 * 
	 * @return Next empty slot in the parking Lot. Returns -1 if parking lot is
	 *         full
	 */
	private int getNextEmptySlot() {
		for (int i = 1; i <= capacity; i++) {
			if (ticketArray[i] == null) {
				return i;
			}
		}
		return -1;
	}

	public int getCapacity() {
		return parkingLot == null ? 0 : parkingLot.capacity;
	}
}
